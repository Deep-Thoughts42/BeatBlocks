{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Cell.svelte",
    "..\\..\\Controls.svelte",
    "..\\..\\Row.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\timport Row from './Row.svelte';\r\n\timport Controls from './Controls.svelte';\r\n\timport {initAudio, playRow, startRecording, stopRecording, setScale} from './Music.svelte';\r\n\tlet config = {\r\n\t\tplaying: false,\r\n\t\tspeed: 200,\r\n\t\trows: 30,\r\n\t\tscale_key: 'classic',\r\n\t}\r\n\r\n\tlet columns = 12;\r\n\tlet grid = [];\r\n\tlet gameInterval;\r\n\tlet curRow = 0;\r\n\tlet lastRow = 0;\r\n\tlet started = false;\r\n\tlet downloadLink;\r\n\tlet recording = false;\r\n\r\n\tconst togglePlaying = async () => {\r\n\t\tconfig.playing = !config.playing;\r\n\t\tif(!started) {\r\n\t\t\tstartPlaying();\r\n\t\t}\r\n\t}\r\n\r\n\tconst startPlaying = async () => {\r\n\t\tif(!started) {\r\n\t\t\tconfig.playing = true;\r\n\t\t\tstarted = true;\r\n\t\t\tawait initAudio();\r\n\t\t}\r\n\t}\r\n\r\n\tconst stopPlaying = () => {\r\n\t\tconfig.playing = false;\r\n\t\tif(lastRow < grid.length) {\r\n\t\t\tgrid[lastRow].isPlaying = false;\r\n\t\t}\r\n\t\tif(curRow < grid.length) {\r\n\t\t\tgrid[curRow].isPlaying = false;\r\n\t\t}\r\n\t\tcurRow = 0;\r\n\t\tlastRow = 0;\r\n\t}\r\n\r\n\tconst clearGrid = (rows) => {\r\n\t\tcurRow = 0;\r\n\t\tgrid = [...Array(rows)].map(\r\n\t\t\tx => Array(columns).fill(false) );\r\n\t}\r\n\r\n\tconst resizeGrid = (rows) => {\r\n\t\tstopPlaying();\r\n\t\twhile(grid.length < rows) {\r\n\t\t\tgrid.push([...Array(columns).fill(false)]);\r\n\t\t}\r\n\r\n\t\twhile(grid.length > rows) {\r\n\t\t\tgrid.pop();\r\n\t\t}\r\n\r\n\t\tgrid[0].isPlaying = false;\r\n\t}\r\n\r\n\tconst initGrid = (hash) => {\r\n\t\tconfig.playing = false;\r\n\t\tlet array = hash.split('&')[0].slice(1).split('-').map(x => parseInt(x, 10));\r\n\t\tconfig.rows = array.length - 1;\r\n\t\tgrid = []\r\n\t\tfor (var i = array.length - 2; i >= 0; i--) {\r\n\t\t\tlet temp = [... Array(columns).fill(false)];\r\n\t\t\tfor (var j = columns - 1; j >= 0; j--) {\r\n\t\t\t\ttemp[j] = (array[i] & (1 << (j))) !== 0;\r\n\t\t\t}\r\n\t\t\tgrid.push(temp.reverse());\r\n\t\t}\r\n\t\tif(hash.split('&').length > 1) {\r\n\t\t\tconfig.speed = parseInt(hash.split('&')[1], 10);\r\n\t\t}\r\n\t\tif(hash.split('&').length > 2) {\r\n\t\t\tconfig.scale_key = hash.split('&')[2];\r\n\t\t}\r\n\t}\r\n\r\n\tconst changeSpeed = (bpm) => {\r\n\t\tclearInterval(gameInterval);\r\n\t\tgameInterval = setInterval(() => {\r\n\t\t\tif(config.playing) {\r\n\t\t\t\tgrid[lastRow].isPlaying = false;\r\n\t\t\t\tgrid[curRow].isPlaying = true;\r\n\t\t\t\tplayRow(grid[curRow]);\r\n\t\t\t\tlastRow  = curRow;\r\n\t\t\t\tcurRow = (curRow + 1) % grid.length;\r\n\t\t\t}\r\n\t\t},  60 * 1000 / bpm);\r\n\t}\r\n\r\n\tconst downloadAudio = () => {\r\n\t\tif(recording) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\trecording = true;\r\n\t\tstopPlaying();\r\n\t\tconfig.playing = true;\r\n\t\tstartRecording(downloadLink);\r\n\r\n\t\t// Play to completion\r\n\t\tlet playbackTime = (grid.length * 60 * 1000) / config.speed;\r\n\t\tsetTimeout(() => {\r\n\t\t\tstopPlaying();\r\n\t\t}, playbackTime);\r\n\r\n\t\t// Record for a bit more.\r\n\t\tsetTimeout(() => {\r\n\t\t\tstopRecording();\r\n\t\t\trecording = false;\r\n\t\t}, playbackTime + 500);\r\n\t}\r\n\r\n\t$: changeSpeed(config.speed);\r\n\r\n\tclearGrid(config.rows);\r\n\r\n\tif(window.location.hash !== '') {\r\n\t\tinitGrid(window.location.hash);\r\n\t}\r\n\r\n</script>\r\n<style>\r\n\ttable {\r\n\t\tbackground: black;\r\n\t}\r\n\r\n\t.container {\r\n\t\tcolor: #ddd;\r\n\t}\r\n\r\n\t.footer a{\r\n\t\tfont-size: 0.8em;\r\n\t\tcolor: #ccc;\r\n\t\ttext-decoration: underline;\r\n\t}\r\n\r\n\t.tagline {\r\n\t\tfont-size: 0.8em;\r\n\t\tfont-weight: 600;\r\n\t}\r\n\r\n\t.message {\r\n\t\tfont-size: 0.7em;\r\n\t\tcolor: red;\r\n\t}\r\n\r\n\tinput[type=range] {\r\n\t\twidth: 20em;\r\n\t}\r\n</style>\r\n\r\n\r\n<div class=\"container\" align=\"center\">\r\n\t<h3>Contribute your own NFT Musical sound</h3>\r\n\t<span class=\"tagline\">Turn on the sound and tap on the grid to play.<br/> After you're done, click the download button.</span>\r\n\t<br/>\r\n\t<Controls\r\n\t\tbind:grid={grid}\r\n\t\tbind:config={config}\r\n\t\ton:playpause={togglePlaying}\r\n\t\ton:stop={stopPlaying}\r\n\t\ton:clear={() => clearGrid(config.rows)}\r\n\t\ton:rowchange={() => resizeGrid(config.rows)}\r\n\t\ton:scalechange={() => setScale(config.scale_key)}\r\n\t\ton:download={downloadAudio}\r\n\t/>\r\n\t{#if recording}\r\n\t\t<span class=\"message\">Please wait for the playback to finish</span>\r\n\t{/if}\r\n\t<a bind:this={downloadLink} download=\"music-grid.wav\" hidden=\"true\">Download</a>\r\n\t<table on:click|once={startPlaying}>\r\n\t\t{#each grid as row}\r\n\t\t\t<Row bind:row={row} bind:playing={row.isPlaying} paused={!config.playing}/>\r\n\t\t{/each}\r\n\t</table>\r\n\r\n\t<br/>\r\n</div>\r\n",
    "<script>\r\n\timport {playCell} from './Music.svelte'\r\n\r\n\texport let active = false;\r\n\texport let column = 0;\r\n\texport let paused = false;\r\n\r\n\tconst drawActive = (e) => {\r\n\t\tif(e.buttons) {\r\n\t\t\ttoggleActive()\r\n\t\t}\r\n\t}\r\n\r\n\tconst toggleActive = () => {\r\n\t\tactive = !active;\r\n\t\tif(paused && active) {\r\n\t\t\tplayCell(column);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\r\n\ttd {\r\n\t\tpadding-top: 0.15em;\r\n\t\tpadding-bottom: 0.15em;\r\n\t\tpadding-left: 0.1em;\r\n\t\tpadding-right: 0.1em;\r\n\t}\r\n\t\r\n\tdiv {\r\n\t\tbackground: #444;\r\n\t\tborder-radius: 3px;\r\n\t\twidth: 1.5em;\r\n\t\theight: 1.5em;\r\n\t\ttransition: 0.06s ease-in;\r\n\t\tuser-drag: none; \r\n\t\tuser-select: none;\r\n\t}\r\n\r\n\tdiv.active {\r\n\t\tbackground: #fff;\r\n\t\tbox-shadow: 0px 0px 8px 2px rgb(255, 255, 255, 0.5);\r\n\t}\r\n\r\n</style>\r\n\r\n<td>\r\n\t<div class:active={active} on:mouseover|capture={drawActive} on:click={toggleActive}>\r\n\t</div>\r\n</td>",
    "<script>\r\n\timport { createEventDispatcher, onMount } from 'svelte';\r\n\timport ClipboardJS from 'clipboard';\r\n\timport { scale_keys } from './Music.svelte';\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\texport let grid;\r\n\texport let config;\r\n\r\n\tlet urlUpdatedRecently = false;\r\n\tlet scrollY = 0;\r\n\r\n\tconst encodeGridToUrl = (grid, speed, scale) => {\r\n\t\tlet res = ''\r\n\t\tfor (var i = grid.length - 1; i >= 0; i--) {\r\n\t\t\tlet temp = 0, k = 1;\r\n\t\t\tfor (var j = grid[i].length - 1; j >= 0; j--) {\r\n\t\t\t\ttemp = temp + k * grid[i][j];\r\n\t\t\t\tk = k * 2;\r\n\t\t\t}\r\n\t\t\tres += (temp + '-');\r\n\t\t}\r\n\t\thistory.replaceState({}, '', '#' + res + '&' + speed + '&' + scale);\r\n\t}\r\n\r\n\tconst updateUrl = (grid, speed, scale) => {\r\n\t\tif(!urlUpdatedRecently) {\r\n\t\t\tencodeGridToUrl(grid, speed, scale);\r\n\t\t\turlUpdatedRecently = true;\r\n\t\t\tsetTimeout(() => {urlUpdatedRecently = false}, 1000);\r\n\t\t}\r\n\t}\r\n\r\n\t$: updateUrl(grid, config.speed, config.scale_key);\r\n\r\n\r\n\tlet clipboard = new ClipboardJS('.share', {\r\n\t\ttext: function() {\r\n\t\t\tencodeGridToUrl(grid, config.speed, config.scale_key);\r\n\t\t\treturn window.location.href;\r\n\t\t}\r\n\t});\r\n\r\n\r\n\tlet header;\r\n\tlet headerOffset;\r\n\tlet primaryClass = \"primary\";\r\n\r\n\tonMount(() => {\r\n\t\theaderOffset = header.offsetTop;\r\n\t});\r\n\r\n\tconst showSticky = (ignored) => {\r\n\t\tif(headerOffset) {\r\n\t\t\tif (window.pageYOffset > headerOffset) {\r\n\t\t\t\tprimaryClass = \"primary sticky\";\r\n\t\t\t} else {\r\n\t\t\t\tprimaryClass = \"primary\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t$: showSticky(scrollY);\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n\t.fa {\r\n\t\ttransition: 0.06s ease-in;\r\n\t}\r\n\r\n\t.fa:hover {\r\n\t\ttransform: scale(1.1);\r\n\t}\r\n\r\n\t.fa:active {\r\n\t\ttransform: scale(0.8);\r\n\t}\r\n\r\n\ta {\r\n\t\tmargin-right: 4px;\r\n\t\tmargin-left: 4px;\r\n\t\tpadding: 12px;\r\n\t\tcolor: white;\r\n\t}\r\n\r\n\t.primary, .settings {\r\n\t\tpadding: 10px;\r\n\t\tbackground: black;\r\n\t}\r\n\r\n\t.sticky {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\tselect {\r\n\t\tbackground: black;\r\n\t\tcolor: white;\r\n\t\tborder: none;\r\n\t\toutline: none;\r\n\t}\r\n</style>\r\n<svelte:window bind:scrollY={scrollY}/>\r\n\r\n<div class=\"container\">\r\n\t<div class=\"settings\">\r\n\t\t<br/>\r\n\t\t<label>\r\n\t\t\tScale :\r\n\t\t\t<select bind:value={config.scale_key} on:change={() => dispatch('scalechange')}>\r\n\t\t\t\t{#each scale_keys as scale}\r\n\t\t\t\t<option value={scale}>\r\n\t\t\t\t\t{scale}\r\n\t\t\t\t</option>\r\n\t\t\t\t{/each}\r\n\t\t\t</select>\r\n\t\t</label>\r\n\t</div>\r\n\t<div class={primaryClass} bind:this={header}>\r\n\t\t<a on:click={() => dispatch('playpause')}>\r\n\t\t\t{#if config.playing}\r\n\t\t\t\t<i class=\"fa fa-lg fa-inverse fa-pause\"/>\r\n\t\t\t{:else}\r\n\t\t\t\t<i class=\"fa fa-lg fa-inverse fa-play\"/>\r\n\t\t\t{/if}\r\n\t\t</a>\r\n\t\t<a on:click={() => dispatch('stop')}><i class=\"fa fa-inverse fa-lg fa-stop\"/></a>\r\n\t\t<a on:click={() => dispatch('clear')}><i class=\"fa fa-lg fa-trash\"/></a>\r\n\t\t<a on:click={() => alert('Link copied to clipboard. Paste it to share')} class=\"share\"><i class=\"fa fa-lg fa-share-alt\"/></a>\r\n\t\t<a on:click={() => dispatch('download')}><i class=\"fa fa-lg fa-download\"/></a>\r\n\t</div>\r\n</div>\r\n",
    "<script>\r\n\timport Cell from './Cell.svelte'\r\n\timport { playRow } from './Music.svelte'\r\n\texport let row = [];\r\n\texport let playing = false;\r\n\texport let paused = false;\r\n\r\n\tconst playThisRow = () => {\r\n\t\trow.isPlaying = true;\r\n\t\tplayRow(row);\r\n\t\tsetTimeout(() => {\r\n\t\t\trow.isPlaying = false;\r\n\t\t}, 500);\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\ttr.playing {\r\n\t\ttransform: scale(0.95);\r\n\t}\r\n\ttr {\r\n\t\ttransition: 0.1s ease-in all;\r\n\t}\r\n\r\n\ti.row-play {\r\n\t\tmargin-top: 7px;\r\n\t\tmargin-right: 4px;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: dimgrey;\r\n\t\tcursor: pointer;\r\n\t}\r\n\ti.row-play:hover {\r\n\t\tcolor: white;\r\n\t}\r\n</style>\r\n\r\n<tr class:playing={playing}>\r\n\t<i on:click={playThisRow} class=\"row-play fa fa-sm fa-inverse fa-play\"/>\r\n\t{#each row as cell, index}\r\n\t\t<Cell bind:active={cell} column=\"{index}\" paused={paused}></Cell>\r\n\t{/each}\r\n</tr>"
  ],
  "names": [],
  "mappings": "AAoIC,KAAK,cAAC,CAAC,AACN,UAAU,CAAE,KAAK,AAClB,CAAC,AAED,UAAU,cAAC,CAAC,AACX,KAAK,CAAE,IAAI,AACZ,CAAC,AAQD,QAAQ,cAAC,CAAC,AACT,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,GAAG,AACjB,CAAC,AAED,QAAQ,cAAC,CAAC,AACT,SAAS,CAAE,KAAK,CAChB,KAAK,CAAE,GAAG,AACX,CAAC;ACnID,EAAE,cAAC,CAAC,AACH,WAAW,CAAE,MAAM,CACnB,cAAc,CAAE,MAAM,CACtB,YAAY,CAAE,KAAK,CACnB,aAAa,CAAE,KAAK,AACrB,CAAC,AAED,GAAG,cAAC,CAAC,AACJ,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,KAAK,CAAC,OAAO,CACzB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,AAClB,CAAC,AAED,GAAG,OAAO,cAAC,CAAC,AACX,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACpD,CAAC;AC0BD,GAAG,cAAC,CAAC,AACJ,UAAU,CAAE,KAAK,CAAC,OAAO,AAC1B,CAAC,AAED,iBAAG,MAAM,AAAC,CAAC,AACV,SAAS,CAAE,MAAM,GAAG,CAAC,AACtB,CAAC,AAED,iBAAG,OAAO,AAAC,CAAC,AACX,SAAS,CAAE,MAAM,GAAG,CAAC,AACtB,CAAC,AAED,CAAC,cAAC,CAAC,AACF,YAAY,CAAE,GAAG,CACjB,WAAW,CAAE,GAAG,CAChB,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,KAAK,AACb,CAAC,AAED,sBAAQ,CAAE,SAAS,cAAC,CAAC,AACpB,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,KAAK,AAClB,CAAC,AAED,OAAO,cAAC,CAAC,AACR,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,MAAM,cAAC,CAAC,AACP,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,AACd,CAAC;ACxFD,EAAE,QAAQ,cAAC,CAAC,AACX,SAAS,CAAE,MAAM,IAAI,CAAC,AACvB,CAAC,AACD,EAAE,cAAC,CAAC,AACH,UAAU,CAAE,IAAI,CAAC,OAAO,CAAC,GAAG,AAC7B,CAAC,AAED,CAAC,SAAS,cAAC,CAAC,AACX,UAAU,CAAE,GAAG,CACf,YAAY,CAAE,GAAG,CACjB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,OAAO,AAChB,CAAC,AACD,CAAC,uBAAS,MAAM,AAAC,CAAC,AACjB,KAAK,CAAE,KAAK,AACb,CAAC"
}